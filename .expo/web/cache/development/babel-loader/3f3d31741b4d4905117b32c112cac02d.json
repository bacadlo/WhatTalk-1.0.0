{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _warnOnce = _interopRequireDefault(require(\"warn-once\"));\n\nvar _MaterialTopTabView = _interopRequireDefault(require(\"../views/MaterialTopTabView\"));\n\nvar _excluded = [\"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n    _excluded2 = [\"swipeEnabled\", \"lazy\", \"lazyPlaceholder\", \"lazyPreloadDistance\", \"tabBarOptions\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction MaterialTopTabNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      restWithDeprecated = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var swipeEnabled = restWithDeprecated.swipeEnabled,\n      lazy = restWithDeprecated.lazy,\n      lazyPlaceholder = restWithDeprecated.lazyPlaceholder,\n      lazyPreloadDistance = restWithDeprecated.lazyPreloadDistance,\n      tabBarOptions = restWithDeprecated.tabBarOptions,\n      rest = (0, _objectWithoutProperties2.default)(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n\n  if (tabBarOptions) {\n    (0, _extends3.default)(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    (0, _warnOnce.default)(tabBarOptions, \"Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.\");\n  }\n\n  var deprecatedProps = {\n    swipeEnabled: swipeEnabled,\n    lazy: lazy,\n    lazyPlaceholder: lazyPlaceholder,\n    lazyPreloadDistance: lazyPreloadDistance\n  };\n  Object.entries(deprecatedProps).forEach(function (_ref2) {\n    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n        propName = _ref3[0],\n        propValue = _ref3[1];\n\n    if (propValue !== undefined) {\n      defaultScreenOptions[propName] = propValue;\n      (0, _warnOnce.default)(true, \"Material Top Tab Navigator: '\" + propName + \"' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#\" + propName.toLowerCase() + \" for more details.\");\n    }\n  });\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.TabRouter, {\n    initialRouteName: initialRouteName,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(_MaterialTopTabView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(MaterialTopTabNavigator);\n\nexports.default = _default;","map":{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["restWithDeprecated","rest","defaultScreenOptions","Object","tabBarActiveTintColor","tabBarOptions","tabBarInactiveTintColor","tabBarPressColor","tabBarPressOpacity","tabBarShowLabel","tabBarShowIcon","tabBarAllowFontScaling","tabBarBounces","tabBarScrollEnabled","tabBarIconStyle","tabBarLabelStyle","tabBarItemStyle","tabBarBadge","tabBarIndicator","tabBarIndicatorStyle","tabBarIndicatorContainerStyle","tabBarContentContainerStyle","tabBarStyle","style","key","warnOnce","JSON","deprecatedProps","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","propValue","propName","NavigationContent","useNavigationBuilder","initialRouteName","backBehavior","children","screenListeners","screenOptions","descriptors","createNavigatorFactory"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationEventMap,\n  MaterialTopTabNavigationOptions,\n} from '../types';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap\n> &\n  TabRouterOptions &\n  MaterialTopTabNavigationConfig;\n\nfunction MaterialTopTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: swipeEnabled is deprecated\n    swipeEnabled,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: lazyPlaceholder is deprecated\n    lazyPlaceholder,\n    // @ts-expect-error: lazyPreloadDistance is deprecated\n    lazyPreloadDistance,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style,\n    });\n\n    (\n      Object.keys(\n        defaultScreenOptions\n      ) as (keyof MaterialTopTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`\n    );\n  }\n\n  const deprecatedProps = {\n    swipeEnabled,\n    lazy,\n    lazyPlaceholder,\n    lazyPreloadDistance,\n  } as const;\n\n  Object.entries(deprecatedProps).forEach(([propName, propValue]) => {\n    if (propValue !== undefined) {\n      // @ts-expect-error: Object.entries doesn't return strict types\n      defaultScreenOptions[propName] = propValue;\n\n      warnOnce(\n        true,\n        `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`\n      );\n    }\n  });\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      MaterialTopTabNavigationOptions,\n      MaterialTopTabNavigationEventMap\n    >(TabRouter, {\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <MaterialTopTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  MaterialTopTabNavigationOptions,\n  MaterialTopTabNavigationEventMap,\n  typeof MaterialTopTabNavigator\n>(MaterialTopTabNavigator);\n"]},"metadata":{},"sourceType":"script"}