{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TabView;\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TabBar = _interopRequireDefault(require(\"./TabBar\"));\n\nvar _SceneView = _interopRequireDefault(require(\"./SceneView\"));\n\nvar _Pager = _interopRequireDefault(require(\"./Pager\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction TabView(_ref) {\n  var onIndexChange = _ref.onIndexChange,\n      navigationState = _ref.navigationState,\n      renderScene = _ref.renderScene,\n      initialLayout = _ref.initialLayout,\n      _ref$keyboardDismissM = _ref.keyboardDismissMode,\n      keyboardDismissMode = _ref$keyboardDismissM === void 0 ? 'auto' : _ref$keyboardDismissM,\n      _ref$lazy = _ref.lazy,\n      lazy = _ref$lazy === void 0 ? false : _ref$lazy,\n      _ref$lazyPreloadDista = _ref.lazyPreloadDistance,\n      lazyPreloadDistance = _ref$lazyPreloadDista === void 0 ? 0 : _ref$lazyPreloadDista,\n      onSwipeStart = _ref.onSwipeStart,\n      onSwipeEnd = _ref.onSwipeEnd,\n      _ref$renderLazyPlaceh = _ref.renderLazyPlaceholder,\n      renderLazyPlaceholder = _ref$renderLazyPlaceh === void 0 ? function () {\n    return null;\n  } : _ref$renderLazyPlaceh,\n      _ref$renderTabBar = _ref.renderTabBar,\n      renderTabBar = _ref$renderTabBar === void 0 ? function (props) {\n    return React.createElement(_TabBar.default, props);\n  } : _ref$renderTabBar,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      style = _ref.style,\n      _ref$swipeEnabled = _ref.swipeEnabled,\n      swipeEnabled = _ref$swipeEnabled === void 0 ? true : _ref$swipeEnabled,\n      _ref$tabBarPosition = _ref.tabBarPosition,\n      tabBarPosition = _ref$tabBarPosition === void 0 ? 'top' : _ref$tabBarPosition;\n\n  var _React$useState = React.useState((0, _extends3.default)({\n    width: 0,\n    height: 0\n  }, initialLayout)),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var jumpToIndex = function jumpToIndex(index) {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (prevLayout) {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    });\n  };\n\n  return React.createElement(_reactNative.View, {\n    onLayout: handleLayout,\n    style: [styles.pager, style]\n  }, React.createElement(_Pager.default, {\n    layout: layout,\n    navigationState: navigationState,\n    keyboardDismissMode: keyboardDismissMode,\n    swipeEnabled: swipeEnabled,\n    onSwipeStart: onSwipeStart,\n    onSwipeEnd: onSwipeEnd,\n    onIndexChange: jumpToIndex\n  }, function (_ref2) {\n    var position = _ref2.position,\n        render = _ref2.render,\n        addEnterListener = _ref2.addEnterListener,\n        jumpTo = _ref2.jumpTo;\n    var sceneRendererProps = {\n      position: position,\n      layout: layout,\n      jumpTo: jumpTo\n    };\n    return React.createElement(React.Fragment, null, tabBarPosition === 'top' && renderTabBar((0, _extends3.default)({}, sceneRendererProps, {\n      navigationState: navigationState\n    })), render(navigationState.routes.map(function (route, i) {\n      return React.createElement(_SceneView.default, _extends({}, sceneRendererProps, {\n        addEnterListener: addEnterListener,\n        key: route.key,\n        index: i,\n        lazy: typeof lazy === 'function' ? lazy({\n          route: route\n        }) : lazy,\n        lazyPreloadDistance: lazyPreloadDistance,\n        navigationState: navigationState,\n        style: sceneContainerStyle\n      }), function (_ref3) {\n        var loading = _ref3.loading;\n        return loading ? renderLazyPlaceholder({\n          route: route\n        }) : renderScene((0, _extends3.default)({}, sceneRendererProps, {\n          route: route\n        }));\n      });\n    })), tabBarPosition === 'bottom' && renderTabBar((0, _extends3.default)({}, sceneRendererProps, {\n      navigationState: navigationState\n    })));\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["keyboardDismissMode","lazy","lazyPreloadDistance","renderLazyPlaceholder","renderTabBar","props","swipeEnabled","tabBarPosition","width","height","initialLayout","jumpToIndex","index","navigationState","onIndexChange","handleLayout","e","setLayout","prevLayout","styles","jumpTo","sceneRendererProps","position","layout","render","route","sceneContainerStyle","loading","renderScene","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport TabBar from './TabBar';\nimport SceneView from './SceneView';\nimport Pager from './Pager';\nimport type {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerProps,\n} from './types';\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;\n  renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;\n  renderTabBar?: (\n    props: SceneRendererProps & { navigationState: NavigationState<T> }\n  ) => React.ReactNode;\n  tabBarPosition?: 'top' | 'bottom';\n  initialLayout?: Partial<Layout>;\n  lazy?: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance?: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function TabView<T extends Route>({\n  onIndexChange,\n  navigationState,\n  renderScene,\n  initialLayout,\n  keyboardDismissMode = 'auto',\n  lazy = false,\n  lazyPreloadDistance = 0,\n  onSwipeStart,\n  onSwipeEnd,\n  renderLazyPlaceholder = () => null,\n  renderTabBar = (props) => <TabBar {...props} />,\n  sceneContainerStyle,\n  style,\n  swipeEnabled = true,\n  tabBarPosition = 'top',\n}: Props<T>) {\n  const [layout, setLayout] = React.useState({\n    width: 0,\n    height: 0,\n    ...initialLayout,\n  });\n\n  const jumpToIndex = (index: number) => {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((prevLayout) => {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return { height, width };\n    });\n  };\n\n  return (\n    <View onLayout={handleLayout} style={[styles.pager, style]}>\n      <Pager\n        layout={layout}\n        navigationState={navigationState}\n        keyboardDismissMode={keyboardDismissMode}\n        swipeEnabled={swipeEnabled}\n        onSwipeStart={onSwipeStart}\n        onSwipeEnd={onSwipeEnd}\n        onIndexChange={jumpToIndex}\n      >\n        {({ position, render, addEnterListener, jumpTo }) => {\n          // All of the props here must not change between re-renders\n          // This is crucial to optimizing the routes with PureComponent\n          const sceneRendererProps = {\n            position,\n            layout,\n            jumpTo,\n          };\n\n          return (\n            <React.Fragment>\n              {tabBarPosition === 'top' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n              {render(\n                navigationState.routes.map((route, i) => {\n                  return (\n                    <SceneView\n                      {...sceneRendererProps}\n                      addEnterListener={addEnterListener}\n                      key={route.key}\n                      index={i}\n                      lazy={typeof lazy === 'function' ? lazy({ route }) : lazy}\n                      lazyPreloadDistance={lazyPreloadDistance}\n                      navigationState={navigationState}\n                      style={sceneContainerStyle}\n                    >\n                      {({ loading }) =>\n                        loading\n                          ? renderLazyPlaceholder({ route })\n                          : renderScene({\n                              ...sceneRendererProps,\n                              route,\n                            })\n                      }\n                    </SceneView>\n                  );\n                })\n              )}\n              {tabBarPosition === 'bottom' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n            </React.Fragment>\n          );\n        }}\n      </Pager>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}